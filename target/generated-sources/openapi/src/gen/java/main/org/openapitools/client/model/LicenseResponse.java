/*
 * JetBrains Account API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support-int@jetbrains.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.client.model.AssigneeResponse;
import org.openapitools.client.model.LastSeenResponse;
import org.openapitools.client.model.PerpetualResponse;
import org.openapitools.client.model.ProductResponse;
import org.openapitools.client.model.SubscriptionResponse;
import org.openapitools.client.model.TeamResponse;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LicenseResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-01-08T21:38:21.637915+01:00[Europe/Berlin]")
public class LicenseResponse {
  public static final String SERIALIZED_NAME_LICENSE_ID = "licenseId";
  @SerializedName(SERIALIZED_NAME_LICENSE_ID)
  private String licenseId;

  public static final String SERIALIZED_NAME_PRODUCT = "product";
  @SerializedName(SERIALIZED_NAME_PRODUCT)
  private ProductResponse product;

  public static final String SERIALIZED_NAME_ASSIGNEE = "assignee";
  @SerializedName(SERIALIZED_NAME_ASSIGNEE)
  private AssigneeResponse assignee;

  public static final String SERIALIZED_NAME_SUBSCRIPTION = "subscription";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION)
  private SubscriptionResponse subscription;

  public static final String SERIALIZED_NAME_PERPETUAL = "perpetual";
  @SerializedName(SERIALIZED_NAME_PERPETUAL)
  private PerpetualResponse perpetual;

  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private String domain;

  public static final String SERIALIZED_NAME_LAST_SEEN = "lastSeen";
  @SerializedName(SERIALIZED_NAME_LAST_SEEN)
  private LastSeenResponse lastSeen;

  public static final String SERIALIZED_NAME_TEAM = "team";
  @SerializedName(SERIALIZED_NAME_TEAM)
  private TeamResponse team;

  public static final String SERIALIZED_NAME_IS_TRANSFERABLE_BETWEEN_TEAMS = "isTransferableBetweenTeams";
  @SerializedName(SERIALIZED_NAME_IS_TRANSFERABLE_BETWEEN_TEAMS)
  private Boolean isTransferableBetweenTeams;

  public static final String SERIALIZED_NAME_IS_TRIAL = "isTrial";
  @SerializedName(SERIALIZED_NAME_IS_TRIAL)
  private Boolean isTrial;

  public static final String SERIALIZED_NAME_IS_AVAILABLE_TO_ASSIGN = "isAvailableToAssign";
  @SerializedName(SERIALIZED_NAME_IS_AVAILABLE_TO_ASSIGN)
  private Boolean isAvailableToAssign;

  public static final String SERIALIZED_NAME_IS_SUSPENDED = "isSuspended";
  @SerializedName(SERIALIZED_NAME_IS_SUSPENDED)
  private Boolean isSuspended;

  public LicenseResponse() { 
  }

  public LicenseResponse licenseId(String licenseId) {
    
    this.licenseId = licenseId;
    return this;
  }

   /**
   * Get licenseId
   * @return licenseId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "ABC1234567", value = "")

  public String getLicenseId() {
    return licenseId;
  }


  public void setLicenseId(String licenseId) {
    this.licenseId = licenseId;
  }


  public LicenseResponse product(ProductResponse product) {
    
    this.product = product;
    return this;
  }

   /**
   * Get product
   * @return product
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ProductResponse getProduct() {
    return product;
  }


  public void setProduct(ProductResponse product) {
    this.product = product;
  }


  public LicenseResponse assignee(AssigneeResponse assignee) {
    
    this.assignee = assignee;
    return this;
  }

   /**
   * Get assignee
   * @return assignee
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AssigneeResponse getAssignee() {
    return assignee;
  }


  public void setAssignee(AssigneeResponse assignee) {
    this.assignee = assignee;
  }


  public LicenseResponse subscription(SubscriptionResponse subscription) {
    
    this.subscription = subscription;
    return this;
  }

   /**
   * Get subscription
   * @return subscription
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public SubscriptionResponse getSubscription() {
    return subscription;
  }


  public void setSubscription(SubscriptionResponse subscription) {
    this.subscription = subscription;
  }


  public LicenseResponse perpetual(PerpetualResponse perpetual) {
    
    this.perpetual = perpetual;
    return this;
  }

   /**
   * Get perpetual
   * @return perpetual
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PerpetualResponse getPerpetual() {
    return perpetual;
  }


  public void setPerpetual(PerpetualResponse perpetual) {
    this.perpetual = perpetual;
  }


  public LicenseResponse domain(String domain) {
    
    this.domain = domain;
    return this;
  }

   /**
   * Get domain
   * @return domain
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDomain() {
    return domain;
  }


  public void setDomain(String domain) {
    this.domain = domain;
  }


  public LicenseResponse lastSeen(LastSeenResponse lastSeen) {
    
    this.lastSeen = lastSeen;
    return this;
  }

   /**
   * Get lastSeen
   * @return lastSeen
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public LastSeenResponse getLastSeen() {
    return lastSeen;
  }


  public void setLastSeen(LastSeenResponse lastSeen) {
    this.lastSeen = lastSeen;
  }


  public LicenseResponse team(TeamResponse team) {
    
    this.team = team;
    return this;
  }

   /**
   * Get team
   * @return team
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TeamResponse getTeam() {
    return team;
  }


  public void setTeam(TeamResponse team) {
    this.team = team;
  }


  public LicenseResponse isTransferableBetweenTeams(Boolean isTransferableBetweenTeams) {
    
    this.isTransferableBetweenTeams = isTransferableBetweenTeams;
    return this;
  }

   /**
   * Get isTransferableBetweenTeams
   * @return isTransferableBetweenTeams
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getIsTransferableBetweenTeams() {
    return isTransferableBetweenTeams;
  }


  public void setIsTransferableBetweenTeams(Boolean isTransferableBetweenTeams) {
    this.isTransferableBetweenTeams = isTransferableBetweenTeams;
  }


  public LicenseResponse isTrial(Boolean isTrial) {
    
    this.isTrial = isTrial;
    return this;
  }

   /**
   * Get isTrial
   * @return isTrial
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getIsTrial() {
    return isTrial;
  }


  public void setIsTrial(Boolean isTrial) {
    this.isTrial = isTrial;
  }


  public LicenseResponse isAvailableToAssign(Boolean isAvailableToAssign) {
    
    this.isAvailableToAssign = isAvailableToAssign;
    return this;
  }

   /**
   * Indicates whether the license is available to assign.
   * @return isAvailableToAssign
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the license is available to assign.")

  public Boolean getIsAvailableToAssign() {
    return isAvailableToAssign;
  }


  public void setIsAvailableToAssign(Boolean isAvailableToAssign) {
    this.isAvailableToAssign = isAvailableToAssign;
  }


  public LicenseResponse isSuspended(Boolean isSuspended) {
    
    this.isSuspended = isSuspended;
    return this;
  }

   /**
   * Get isSuspended
   * @return isSuspended
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getIsSuspended() {
    return isSuspended;
  }


  public void setIsSuspended(Boolean isSuspended) {
    this.isSuspended = isSuspended;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LicenseResponse licenseResponse = (LicenseResponse) o;
    return Objects.equals(this.licenseId, licenseResponse.licenseId) &&
        Objects.equals(this.product, licenseResponse.product) &&
        Objects.equals(this.assignee, licenseResponse.assignee) &&
        Objects.equals(this.subscription, licenseResponse.subscription) &&
        Objects.equals(this.perpetual, licenseResponse.perpetual) &&
        Objects.equals(this.domain, licenseResponse.domain) &&
        Objects.equals(this.lastSeen, licenseResponse.lastSeen) &&
        Objects.equals(this.team, licenseResponse.team) &&
        Objects.equals(this.isTransferableBetweenTeams, licenseResponse.isTransferableBetweenTeams) &&
        Objects.equals(this.isTrial, licenseResponse.isTrial) &&
        Objects.equals(this.isAvailableToAssign, licenseResponse.isAvailableToAssign) &&
        Objects.equals(this.isSuspended, licenseResponse.isSuspended);
  }

  @Override
  public int hashCode() {
    return Objects.hash(licenseId, product, assignee, subscription, perpetual, domain, lastSeen, team, isTransferableBetweenTeams, isTrial, isAvailableToAssign, isSuspended);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LicenseResponse {\n");
    sb.append("    licenseId: ").append(toIndentedString(licenseId)).append("\n");
    sb.append("    product: ").append(toIndentedString(product)).append("\n");
    sb.append("    assignee: ").append(toIndentedString(assignee)).append("\n");
    sb.append("    subscription: ").append(toIndentedString(subscription)).append("\n");
    sb.append("    perpetual: ").append(toIndentedString(perpetual)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    lastSeen: ").append(toIndentedString(lastSeen)).append("\n");
    sb.append("    team: ").append(toIndentedString(team)).append("\n");
    sb.append("    isTransferableBetweenTeams: ").append(toIndentedString(isTransferableBetweenTeams)).append("\n");
    sb.append("    isTrial: ").append(toIndentedString(isTrial)).append("\n");
    sb.append("    isAvailableToAssign: ").append(toIndentedString(isAvailableToAssign)).append("\n");
    sb.append("    isSuspended: ").append(toIndentedString(isSuspended)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("licenseId");
    openapiFields.add("product");
    openapiFields.add("assignee");
    openapiFields.add("subscription");
    openapiFields.add("perpetual");
    openapiFields.add("domain");
    openapiFields.add("lastSeen");
    openapiFields.add("team");
    openapiFields.add("isTransferableBetweenTeams");
    openapiFields.add("isTrial");
    openapiFields.add("isAvailableToAssign");
    openapiFields.add("isSuspended");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to LicenseResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (LicenseResponse.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in LicenseResponse is not found in the empty JSON string", LicenseResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!LicenseResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LicenseResponse` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("licenseId") != null && !jsonObj.get("licenseId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `licenseId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("licenseId").toString()));
      }
      // validate the optional field `product`
      if (jsonObj.getAsJsonObject("product") != null) {
        ProductResponse.validateJsonObject(jsonObj.getAsJsonObject("product"));
      }
      // validate the optional field `assignee`
      if (jsonObj.getAsJsonObject("assignee") != null) {
        AssigneeResponse.validateJsonObject(jsonObj.getAsJsonObject("assignee"));
      }
      // validate the optional field `subscription`
      if (jsonObj.getAsJsonObject("subscription") != null) {
        SubscriptionResponse.validateJsonObject(jsonObj.getAsJsonObject("subscription"));
      }
      // validate the optional field `perpetual`
      if (jsonObj.getAsJsonObject("perpetual") != null) {
        PerpetualResponse.validateJsonObject(jsonObj.getAsJsonObject("perpetual"));
      }
      if (jsonObj.get("domain") != null && !jsonObj.get("domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain").toString()));
      }
      // validate the optional field `lastSeen`
      if (jsonObj.getAsJsonObject("lastSeen") != null) {
        LastSeenResponse.validateJsonObject(jsonObj.getAsJsonObject("lastSeen"));
      }
      // validate the optional field `team`
      if (jsonObj.getAsJsonObject("team") != null) {
        TeamResponse.validateJsonObject(jsonObj.getAsJsonObject("team"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LicenseResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LicenseResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LicenseResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LicenseResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<LicenseResponse>() {
           @Override
           public void write(JsonWriter out, LicenseResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LicenseResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LicenseResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LicenseResponse
  * @throws IOException if the JSON string is invalid with respect to LicenseResponse
  */
  public static LicenseResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LicenseResponse.class);
  }

 /**
  * Convert an instance of LicenseResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

