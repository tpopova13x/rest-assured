/*
 * JetBrains Account API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support-int@jetbrains.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.ContactFlagsResponse;
import org.openapitools.client.model.ManagedEntityType;
import org.openapitools.client.model.TeamResponseExt;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ManagedCustomerResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-01-08T21:38:21.637915+01:00[Europe/Berlin]")
public class ManagedCustomerResponse {
  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private ManagedEntityType type;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private Long code;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * The role of current account on the customer.
   */
  @JsonAdapter(RoleEnum.Adapter.class)
  public enum RoleEnum {
    ADMIN("ADMIN"),
    
    VIEWER("VIEWER"),
    
    PRIMARY_CONTACT("PRIMARY_CONTACT");

    private String value;

    RoleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RoleEnum fromValue(String value) {
      for (RoleEnum b : RoleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RoleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RoleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RoleEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RoleEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ROLE = "role";
  @SerializedName(SERIALIZED_NAME_ROLE)
  private RoleEnum role;

  public static final String SERIALIZED_NAME_CONTACT_FLAGS = "contactFlags";
  @SerializedName(SERIALIZED_NAME_CONTACT_FLAGS)
  private ContactFlagsResponse contactFlags;

  public static final String SERIALIZED_NAME_TEAMS = "teams";
  @SerializedName(SERIALIZED_NAME_TEAMS)
  private List<TeamResponseExt> teams = null;

  public ManagedCustomerResponse() { 
  }

  public ManagedCustomerResponse type(ManagedEntityType type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ManagedEntityType getType() {
    return type;
  }


  public void setType(ManagedEntityType type) {
    this.type = type;
  }


  public ManagedCustomerResponse code(Long code) {
    
    this.code = code;
    return this;
  }

   /**
   * Code of the managed customer. Use this code for API requests
   * @return code
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "Code of the managed customer. Use this code for API requests")

  public Long getCode() {
    return code;
  }


  public void setCode(Long code) {
    this.code = code;
  }


  public ManagedCustomerResponse name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Name of the managed customer.
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Some Organization", value = "Name of the managed customer.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public ManagedCustomerResponse role(RoleEnum role) {
    
    this.role = role;
    return this;
  }

   /**
   * The role of current account on the customer.
   * @return role
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "ADMIN", value = "The role of current account on the customer.")

  public RoleEnum getRole() {
    return role;
  }


  public void setRole(RoleEnum role) {
    this.role = role;
  }


  public ManagedCustomerResponse contactFlags(ContactFlagsResponse contactFlags) {
    
    this.contactFlags = contactFlags;
    return this;
  }

   /**
   * Get contactFlags
   * @return contactFlags
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ContactFlagsResponse getContactFlags() {
    return contactFlags;
  }


  public void setContactFlags(ContactFlagsResponse contactFlags) {
    this.contactFlags = contactFlags;
  }


  public ManagedCustomerResponse teams(List<TeamResponseExt> teams) {
    
    this.teams = teams;
    return this;
  }

  public ManagedCustomerResponse addTeamsItem(TeamResponseExt teamsItem) {
    if (this.teams == null) {
      this.teams = new ArrayList<>();
    }
    this.teams.add(teamsItem);
    return this;
  }

   /**
   * List of customer teams.
   * @return teams
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of customer teams.")

  public List<TeamResponseExt> getTeams() {
    return teams;
  }


  public void setTeams(List<TeamResponseExt> teams) {
    this.teams = teams;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ManagedCustomerResponse managedCustomerResponse = (ManagedCustomerResponse) o;
    return Objects.equals(this.type, managedCustomerResponse.type) &&
        Objects.equals(this.code, managedCustomerResponse.code) &&
        Objects.equals(this.name, managedCustomerResponse.name) &&
        Objects.equals(this.role, managedCustomerResponse.role) &&
        Objects.equals(this.contactFlags, managedCustomerResponse.contactFlags) &&
        Objects.equals(this.teams, managedCustomerResponse.teams);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, code, name, role, contactFlags, teams);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ManagedCustomerResponse {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    contactFlags: ").append(toIndentedString(contactFlags)).append("\n");
    sb.append("    teams: ").append(toIndentedString(teams)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("code");
    openapiFields.add("name");
    openapiFields.add("role");
    openapiFields.add("contactFlags");
    openapiFields.add("teams");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ManagedCustomerResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ManagedCustomerResponse.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ManagedCustomerResponse is not found in the empty JSON string", ManagedCustomerResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ManagedCustomerResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ManagedCustomerResponse` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("role") != null && !jsonObj.get("role").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `role` to be a primitive type in the JSON string but got `%s`", jsonObj.get("role").toString()));
      }
      // validate the optional field `contactFlags`
      if (jsonObj.getAsJsonObject("contactFlags") != null) {
        ContactFlagsResponse.validateJsonObject(jsonObj.getAsJsonObject("contactFlags"));
      }
      JsonArray jsonArrayteams = jsonObj.getAsJsonArray("teams");
      if (jsonArrayteams != null) {
        // ensure the json data is an array
        if (!jsonObj.get("teams").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `teams` to be an array in the JSON string but got `%s`", jsonObj.get("teams").toString()));
        }

        // validate the optional field `teams` (array)
        for (int i = 0; i < jsonArrayteams.size(); i++) {
          TeamResponseExt.validateJsonObject(jsonArrayteams.get(i).getAsJsonObject());
        };
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ManagedCustomerResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ManagedCustomerResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ManagedCustomerResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ManagedCustomerResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ManagedCustomerResponse>() {
           @Override
           public void write(JsonWriter out, ManagedCustomerResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ManagedCustomerResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ManagedCustomerResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ManagedCustomerResponse
  * @throws IOException if the JSON string is invalid with respect to ManagedCustomerResponse
  */
  public static ManagedCustomerResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ManagedCustomerResponse.class);
  }

 /**
  * Convert an instance of ManagedCustomerResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

