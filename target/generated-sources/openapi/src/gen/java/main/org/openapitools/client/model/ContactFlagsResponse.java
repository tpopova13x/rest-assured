/*
 * JetBrains Account API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support-int@jetbrains.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Flags of the current account&#39;s contact on the customer.
 */
@ApiModel(description = "Flags of the current account's contact on the customer.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-01-08T21:38:21.637915+01:00[Europe/Berlin]")
public class ContactFlagsResponse {
  public static final String SERIALIZED_NAME_IS_PRIMARY_LICENSEE = "isPrimaryLicensee";
  @SerializedName(SERIALIZED_NAME_IS_PRIMARY_LICENSEE)
  private Boolean isPrimaryLicensee;

  public static final String SERIALIZED_NAME_IS_PRIMARY_TECHNICAL = "isPrimaryTechnical";
  @SerializedName(SERIALIZED_NAME_IS_PRIMARY_TECHNICAL)
  private Boolean isPrimaryTechnical;

  public static final String SERIALIZED_NAME_IS_PRIMARY_BILLING = "isPrimaryBilling";
  @SerializedName(SERIALIZED_NAME_IS_PRIMARY_BILLING)
  private Boolean isPrimaryBilling;

  public ContactFlagsResponse() { 
  }

  public ContactFlagsResponse isPrimaryLicensee(Boolean isPrimaryLicensee) {
    
    this.isPrimaryLicensee = isPrimaryLicensee;
    return this;
  }

   /**
   * Get isPrimaryLicensee
   * @return isPrimaryLicensee
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getIsPrimaryLicensee() {
    return isPrimaryLicensee;
  }


  public void setIsPrimaryLicensee(Boolean isPrimaryLicensee) {
    this.isPrimaryLicensee = isPrimaryLicensee;
  }


  public ContactFlagsResponse isPrimaryTechnical(Boolean isPrimaryTechnical) {
    
    this.isPrimaryTechnical = isPrimaryTechnical;
    return this;
  }

   /**
   * Get isPrimaryTechnical
   * @return isPrimaryTechnical
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getIsPrimaryTechnical() {
    return isPrimaryTechnical;
  }


  public void setIsPrimaryTechnical(Boolean isPrimaryTechnical) {
    this.isPrimaryTechnical = isPrimaryTechnical;
  }


  public ContactFlagsResponse isPrimaryBilling(Boolean isPrimaryBilling) {
    
    this.isPrimaryBilling = isPrimaryBilling;
    return this;
  }

   /**
   * Get isPrimaryBilling
   * @return isPrimaryBilling
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getIsPrimaryBilling() {
    return isPrimaryBilling;
  }


  public void setIsPrimaryBilling(Boolean isPrimaryBilling) {
    this.isPrimaryBilling = isPrimaryBilling;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContactFlagsResponse contactFlagsResponse = (ContactFlagsResponse) o;
    return Objects.equals(this.isPrimaryLicensee, contactFlagsResponse.isPrimaryLicensee) &&
        Objects.equals(this.isPrimaryTechnical, contactFlagsResponse.isPrimaryTechnical) &&
        Objects.equals(this.isPrimaryBilling, contactFlagsResponse.isPrimaryBilling);
  }

  @Override
  public int hashCode() {
    return Objects.hash(isPrimaryLicensee, isPrimaryTechnical, isPrimaryBilling);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContactFlagsResponse {\n");
    sb.append("    isPrimaryLicensee: ").append(toIndentedString(isPrimaryLicensee)).append("\n");
    sb.append("    isPrimaryTechnical: ").append(toIndentedString(isPrimaryTechnical)).append("\n");
    sb.append("    isPrimaryBilling: ").append(toIndentedString(isPrimaryBilling)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("isPrimaryLicensee");
    openapiFields.add("isPrimaryTechnical");
    openapiFields.add("isPrimaryBilling");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ContactFlagsResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ContactFlagsResponse.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContactFlagsResponse is not found in the empty JSON string", ContactFlagsResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ContactFlagsResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContactFlagsResponse` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContactFlagsResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContactFlagsResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContactFlagsResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContactFlagsResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ContactFlagsResponse>() {
           @Override
           public void write(JsonWriter out, ContactFlagsResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContactFlagsResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ContactFlagsResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ContactFlagsResponse
  * @throws IOException if the JSON string is invalid with respect to ContactFlagsResponse
  */
  public static ContactFlagsResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContactFlagsResponse.class);
  }

 /**
  * Convert an instance of ContactFlagsResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

