/*
 * JetBrains Account API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support-int@jetbrains.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AssignLicenseRequest;
import org.openapitools.client.model.ChangeTeamRequest;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.LicenseResponse;
import org.openapitools.client.model.RevokedLicensesResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class LicensesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LicensesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LicensesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for assignLicense
     * @param assignLicenseRequest  (required)
     * @param xCustomerCode Company Profile ID, it can be found on JetBrains Account portal near the company name (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assignLicenseCall(AssignLicenseRequest assignLicenseRequest, String xCustomerCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = assignLicenseRequest;

        // create path and map variables
        String localVarPath = "/customer/licenses/assign";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xCustomerCode != null) {
            localVarHeaderParams.put("X-Customer-Code", localVarApiClient.parameterToString(xCustomerCode));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "header-api-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assignLicenseValidateBeforeCall(AssignLicenseRequest assignLicenseRequest, String xCustomerCode, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'assignLicenseRequest' is set
        if (assignLicenseRequest == null) {
            throw new ApiException("Missing the required parameter 'assignLicenseRequest' when calling assignLicense(Async)");
        }
        

        okhttp3.Call localVarCall = assignLicenseCall(assignLicenseRequest, xCustomerCode, _callback);
        return localVarCall;

    }

    /**
     * Assigns a license to a user
     * 
     * @param assignLicenseRequest  (required)
     * @param xCustomerCode Company Profile ID, it can be found on JetBrains Account portal near the company name (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> forbidden </td><td>  -  </td></tr>
     </table>
     */
    public void assignLicense(AssignLicenseRequest assignLicenseRequest, String xCustomerCode) throws ApiException {
        assignLicenseWithHttpInfo(assignLicenseRequest, xCustomerCode);
    }

    /**
     * Assigns a license to a user
     * 
     * @param assignLicenseRequest  (required)
     * @param xCustomerCode Company Profile ID, it can be found on JetBrains Account portal near the company name (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> assignLicenseWithHttpInfo(AssignLicenseRequest assignLicenseRequest, String xCustomerCode) throws ApiException {
        okhttp3.Call localVarCall = assignLicenseValidateBeforeCall(assignLicenseRequest, xCustomerCode, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Assigns a license to a user (asynchronously)
     * 
     * @param assignLicenseRequest  (required)
     * @param xCustomerCode Company Profile ID, it can be found on JetBrains Account portal near the company name (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assignLicenseAsync(AssignLicenseRequest assignLicenseRequest, String xCustomerCode, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = assignLicenseValidateBeforeCall(assignLicenseRequest, xCustomerCode, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for changeTeam
     * @param changeTeamRequest  (required)
     * @param xCustomerCode Company Profile ID, it can be found on JetBrains Account portal near the company name (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changeTeamCall(ChangeTeamRequest changeTeamRequest, String xCustomerCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = changeTeamRequest;

        // create path and map variables
        String localVarPath = "/customer/changeLicensesTeam";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xCustomerCode != null) {
            localVarHeaderParams.put("X-Customer-Code", localVarApiClient.parameterToString(xCustomerCode));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "header-api-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call changeTeamValidateBeforeCall(ChangeTeamRequest changeTeamRequest, String xCustomerCode, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'changeTeamRequest' is set
        if (changeTeamRequest == null) {
            throw new ApiException("Missing the required parameter 'changeTeamRequest' when calling changeTeam(Async)");
        }
        

        okhttp3.Call localVarCall = changeTeamCall(changeTeamRequest, xCustomerCode, _callback);
        return localVarCall;

    }

    /**
     * Change team for licenses
     * Changes team for provided licenses. Only licenses that are transferable between teams will be transferred.
     * @param changeTeamRequest  (required)
     * @param xCustomerCode Company Profile ID, it can be found on JetBrains Account portal near the company name (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> forbidden </td><td>  -  </td></tr>
     </table>
     */
    public void changeTeam(ChangeTeamRequest changeTeamRequest, String xCustomerCode) throws ApiException {
        changeTeamWithHttpInfo(changeTeamRequest, xCustomerCode);
    }

    /**
     * Change team for licenses
     * Changes team for provided licenses. Only licenses that are transferable between teams will be transferred.
     * @param changeTeamRequest  (required)
     * @param xCustomerCode Company Profile ID, it can be found on JetBrains Account portal near the company name (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> changeTeamWithHttpInfo(ChangeTeamRequest changeTeamRequest, String xCustomerCode) throws ApiException {
        okhttp3.Call localVarCall = changeTeamValidateBeforeCall(changeTeamRequest, xCustomerCode, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Change team for licenses (asynchronously)
     * Changes team for provided licenses. Only licenses that are transferable between teams will be transferred.
     * @param changeTeamRequest  (required)
     * @param xCustomerCode Company Profile ID, it can be found on JetBrains Account portal near the company name (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changeTeamAsync(ChangeTeamRequest changeTeamRequest, String xCustomerCode, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = changeTeamValidateBeforeCall(changeTeamRequest, xCustomerCode, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllForCustomer
     * @param xCustomerCode Company Profile ID, it can be found on JetBrains Account portal near the company name (optional)
     * @param productCode Product code to filter licenses (optional, default to null)
     * @param page Current page number (page numbering starts with 1) (optional, default to 1)
     * @param perPage The number of items to return per page (optional, default to 100)
     * @param assigned Fetches only assigned licenses if set to true and unassigned is set to false. If set to null all licenses will be fetched. (optional, default to false)
     * @param assigneeEmail Assignee email to filter licenses (optional, default to null)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  * X-Total-Count - The total entries <br>  * Link - Links for pagination <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getAllForCustomerCall(String xCustomerCode, String productCode, Integer page, Integer perPage, Boolean assigned, String assigneeEmail, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/customer/licenses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (productCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("productCode", productCode));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("perPage", perPage));
        }

        if (assigned != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("assigned", assigned));
        }

        if (assigneeEmail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("assigneeEmail", assigneeEmail));
        }

        if (xCustomerCode != null) {
            localVarHeaderParams.put("X-Customer-Code", localVarApiClient.parameterToString(xCustomerCode));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "header-api-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllForCustomerValidateBeforeCall(String xCustomerCode, String productCode, Integer page, Integer perPage, Boolean assigned, String assigneeEmail, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getAllForCustomerCall(xCustomerCode, productCode, page, perPage, assigned, assigneeEmail, _callback);
        return localVarCall;

    }

    /**
     * Returns all the licenses of a current customer
     * 
     * @param xCustomerCode Company Profile ID, it can be found on JetBrains Account portal near the company name (optional)
     * @param productCode Product code to filter licenses (optional, default to null)
     * @param page Current page number (page numbering starts with 1) (optional, default to 1)
     * @param perPage The number of items to return per page (optional, default to 100)
     * @param assigned Fetches only assigned licenses if set to true and unassigned is set to false. If set to null all licenses will be fetched. (optional, default to false)
     * @param assigneeEmail Assignee email to filter licenses (optional, default to null)
     * @return List&lt;LicenseResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  * X-Total-Count - The total entries <br>  * Link - Links for pagination <br>  </td></tr>
     </table>
     */
    public List<LicenseResponse> getAllForCustomer(String xCustomerCode, String productCode, Integer page, Integer perPage, Boolean assigned, String assigneeEmail) throws ApiException {
        ApiResponse<List<LicenseResponse>> localVarResp = getAllForCustomerWithHttpInfo(xCustomerCode, productCode, page, perPage, assigned, assigneeEmail);
        return localVarResp.getData();
    }

    /**
     * Returns all the licenses of a current customer
     * 
     * @param xCustomerCode Company Profile ID, it can be found on JetBrains Account portal near the company name (optional)
     * @param productCode Product code to filter licenses (optional, default to null)
     * @param page Current page number (page numbering starts with 1) (optional, default to 1)
     * @param perPage The number of items to return per page (optional, default to 100)
     * @param assigned Fetches only assigned licenses if set to true and unassigned is set to false. If set to null all licenses will be fetched. (optional, default to false)
     * @param assigneeEmail Assignee email to filter licenses (optional, default to null)
     * @return ApiResponse&lt;List&lt;LicenseResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  * X-Total-Count - The total entries <br>  * Link - Links for pagination <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<LicenseResponse>> getAllForCustomerWithHttpInfo(String xCustomerCode, String productCode, Integer page, Integer perPage, Boolean assigned, String assigneeEmail) throws ApiException {
        okhttp3.Call localVarCall = getAllForCustomerValidateBeforeCall(xCustomerCode, productCode, page, perPage, assigned, assigneeEmail, null);
        Type localVarReturnType = new TypeToken<List<LicenseResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns all the licenses of a current customer (asynchronously)
     * 
     * @param xCustomerCode Company Profile ID, it can be found on JetBrains Account portal near the company name (optional)
     * @param productCode Product code to filter licenses (optional, default to null)
     * @param page Current page number (page numbering starts with 1) (optional, default to 1)
     * @param perPage The number of items to return per page (optional, default to 100)
     * @param assigned Fetches only assigned licenses if set to true and unassigned is set to false. If set to null all licenses will be fetched. (optional, default to false)
     * @param assigneeEmail Assignee email to filter licenses (optional, default to null)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  * X-Total-Count - The total entries <br>  * Link - Links for pagination <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getAllForCustomerAsync(String xCustomerCode, String productCode, Integer page, Integer perPage, Boolean assigned, String assigneeEmail, final ApiCallback<List<LicenseResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllForCustomerValidateBeforeCall(xCustomerCode, productCode, page, perPage, assigned, assigneeEmail, _callback);
        Type localVarReturnType = new TypeToken<List<LicenseResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllForTeam
     * @param teamId Team ID (required)
     * @param xCustomerCode Company Profile ID, it can be found on JetBrains Account portal near the company name (optional)
     * @param productCode Product code to filter licenses (optional, default to null)
     * @param page Current page number (page numbering starts with 1) (optional, default to 1)
     * @param perPage The number of items to return per page (optional, default to 100)
     * @param assigned Fetches only assigned licenses if set to true and unassigned is set to false. If set to null all licenses will be fetched. (optional, default to false)
     * @param assigneeEmail Assignee email to filter licenses (optional, default to null)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  * X-Total-Count - The total entries <br>  * Link - Links for pagination <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getAllForTeamCall(Integer teamId, String xCustomerCode, String productCode, Integer page, Integer perPage, Boolean assigned, String assigneeEmail, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/customer/teams/{teamId}/licenses"
            .replaceAll("\\{" + "teamId" + "\\}", localVarApiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (productCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("productCode", productCode));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("perPage", perPage));
        }

        if (assigned != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("assigned", assigned));
        }

        if (assigneeEmail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("assigneeEmail", assigneeEmail));
        }

        if (xCustomerCode != null) {
            localVarHeaderParams.put("X-Customer-Code", localVarApiClient.parameterToString(xCustomerCode));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "header-api-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllForTeamValidateBeforeCall(Integer teamId, String xCustomerCode, String productCode, Integer page, Integer perPage, Boolean assigned, String assigneeEmail, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling getAllForTeam(Async)");
        }
        

        okhttp3.Call localVarCall = getAllForTeamCall(teamId, xCustomerCode, productCode, page, perPage, assigned, assigneeEmail, _callback);
        return localVarCall;

    }

    /**
     * Returns all the licenses of a current team
     * 
     * @param teamId Team ID (required)
     * @param xCustomerCode Company Profile ID, it can be found on JetBrains Account portal near the company name (optional)
     * @param productCode Product code to filter licenses (optional, default to null)
     * @param page Current page number (page numbering starts with 1) (optional, default to 1)
     * @param perPage The number of items to return per page (optional, default to 100)
     * @param assigned Fetches only assigned licenses if set to true and unassigned is set to false. If set to null all licenses will be fetched. (optional, default to false)
     * @param assigneeEmail Assignee email to filter licenses (optional, default to null)
     * @return List&lt;LicenseResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  * X-Total-Count - The total entries <br>  * Link - Links for pagination <br>  </td></tr>
     </table>
     */
    public List<LicenseResponse> getAllForTeam(Integer teamId, String xCustomerCode, String productCode, Integer page, Integer perPage, Boolean assigned, String assigneeEmail) throws ApiException {
        ApiResponse<List<LicenseResponse>> localVarResp = getAllForTeamWithHttpInfo(teamId, xCustomerCode, productCode, page, perPage, assigned, assigneeEmail);
        return localVarResp.getData();
    }

    /**
     * Returns all the licenses of a current team
     * 
     * @param teamId Team ID (required)
     * @param xCustomerCode Company Profile ID, it can be found on JetBrains Account portal near the company name (optional)
     * @param productCode Product code to filter licenses (optional, default to null)
     * @param page Current page number (page numbering starts with 1) (optional, default to 1)
     * @param perPage The number of items to return per page (optional, default to 100)
     * @param assigned Fetches only assigned licenses if set to true and unassigned is set to false. If set to null all licenses will be fetched. (optional, default to false)
     * @param assigneeEmail Assignee email to filter licenses (optional, default to null)
     * @return ApiResponse&lt;List&lt;LicenseResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  * X-Total-Count - The total entries <br>  * Link - Links for pagination <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<LicenseResponse>> getAllForTeamWithHttpInfo(Integer teamId, String xCustomerCode, String productCode, Integer page, Integer perPage, Boolean assigned, String assigneeEmail) throws ApiException {
        okhttp3.Call localVarCall = getAllForTeamValidateBeforeCall(teamId, xCustomerCode, productCode, page, perPage, assigned, assigneeEmail, null);
        Type localVarReturnType = new TypeToken<List<LicenseResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns all the licenses of a current team (asynchronously)
     * 
     * @param teamId Team ID (required)
     * @param xCustomerCode Company Profile ID, it can be found on JetBrains Account portal near the company name (optional)
     * @param productCode Product code to filter licenses (optional, default to null)
     * @param page Current page number (page numbering starts with 1) (optional, default to 1)
     * @param perPage The number of items to return per page (optional, default to 100)
     * @param assigned Fetches only assigned licenses if set to true and unassigned is set to false. If set to null all licenses will be fetched. (optional, default to false)
     * @param assigneeEmail Assignee email to filter licenses (optional, default to null)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  * X-Total-Count - The total entries <br>  * Link - Links for pagination <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getAllForTeamAsync(Integer teamId, String xCustomerCode, String productCode, Integer page, Integer perPage, Boolean assigned, String assigneeEmail, final ApiCallback<List<LicenseResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllForTeamValidateBeforeCall(teamId, xCustomerCode, productCode, page, perPage, assigned, assigneeEmail, _callback);
        Type localVarReturnType = new TypeToken<List<LicenseResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getByLicenseId
     * @param licenseId ID of a license (required)
     * @param xCustomerCode Company Profile ID, it can be found on JetBrains Account portal near the company name (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getByLicenseIdCall(String licenseId, String xCustomerCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/customer/licenses/{licenseId}"
            .replaceAll("\\{" + "licenseId" + "\\}", localVarApiClient.escapeString(licenseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xCustomerCode != null) {
            localVarHeaderParams.put("X-Customer-Code", localVarApiClient.parameterToString(xCustomerCode));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "header-api-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByLicenseIdValidateBeforeCall(String licenseId, String xCustomerCode, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'licenseId' is set
        if (licenseId == null) {
            throw new ApiException("Missing the required parameter 'licenseId' when calling getByLicenseId(Async)");
        }
        

        okhttp3.Call localVarCall = getByLicenseIdCall(licenseId, xCustomerCode, _callback);
        return localVarCall;

    }

    /**
     * Returns a license by ID
     * 
     * @param licenseId ID of a license (required)
     * @param xCustomerCode Company Profile ID, it can be found on JetBrains Account portal near the company name (optional)
     * @return LicenseResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public LicenseResponse getByLicenseId(String licenseId, String xCustomerCode) throws ApiException {
        ApiResponse<LicenseResponse> localVarResp = getByLicenseIdWithHttpInfo(licenseId, xCustomerCode);
        return localVarResp.getData();
    }

    /**
     * Returns a license by ID
     * 
     * @param licenseId ID of a license (required)
     * @param xCustomerCode Company Profile ID, it can be found on JetBrains Account portal near the company name (optional)
     * @return ApiResponse&lt;LicenseResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LicenseResponse> getByLicenseIdWithHttpInfo(String licenseId, String xCustomerCode) throws ApiException {
        okhttp3.Call localVarCall = getByLicenseIdValidateBeforeCall(licenseId, xCustomerCode, null);
        Type localVarReturnType = new TypeToken<LicenseResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a license by ID (asynchronously)
     * 
     * @param licenseId ID of a license (required)
     * @param xCustomerCode Company Profile ID, it can be found on JetBrains Account portal near the company name (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getByLicenseIdAsync(String licenseId, String xCustomerCode, final ApiCallback<LicenseResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByLicenseIdValidateBeforeCall(licenseId, xCustomerCode, _callback);
        Type localVarReturnType = new TypeToken<LicenseResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for revokeAsset
     * @param xCustomerCode Company Profile ID, it can be found on JetBrains Account portal near the company name (optional)
     * @param licenseId ID of a license (optional)
     * @param email Assignee&#39;s email (optional)
     * @param productCode Product code to filter licenses (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> licenseIds of revoked licenses </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call revokeAssetCall(String xCustomerCode, String licenseId, String email, String productCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/customer/licenses/revoke";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (licenseId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("licenseId", licenseId));
        }

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (productCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("productCode", productCode));
        }

        if (xCustomerCode != null) {
            localVarHeaderParams.put("X-Customer-Code", localVarApiClient.parameterToString(xCustomerCode));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "header-api-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call revokeAssetValidateBeforeCall(String xCustomerCode, String licenseId, String email, String productCode, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = revokeAssetCall(xCustomerCode, licenseId, email, productCode, _callback);
        return localVarCall;

    }

    /**
     * Revokes a license from a user
     * If licenseId is provided, a single license will be revoked if found. Other parameters are ignored in this case. &lt;br /&gt;If he licenseId is not provided then the licenses will be revoked by the assignee&#39;s email. &lt;br /&gt;In addition to email, productCode might be provided to revoke licenses for specified products only for the defined email. &lt;br /&gt;JetBrains IDE licenses are distributed on a per-user basis and must be statically assigned to developers. Therefore, the revoke operation via the JetBrains Account API is available only 30 days after the license has been assigned. For the automated license distribution you can use the JetBrains License Vault: https://www.jetbrains.com/license-server &lt;br /&gt;If the licenses are being revoked by assignee&#39;s email within 30 days after assignment (for at least 1 assignee&#39;s license found), RECENTLY_ASSIGNED_LICENSE_IS_NOT_AVAILABLE_FOR_REVOKE error will be returned and no licenses will be revoked.
     * @param xCustomerCode Company Profile ID, it can be found on JetBrains Account portal near the company name (optional)
     * @param licenseId ID of a license (optional)
     * @param email Assignee&#39;s email (optional)
     * @param productCode Product code to filter licenses (optional)
     * @return RevokedLicensesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> licenseIds of revoked licenses </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> forbidden </td><td>  -  </td></tr>
     </table>
     */
    public RevokedLicensesResponse revokeAsset(String xCustomerCode, String licenseId, String email, String productCode) throws ApiException {
        ApiResponse<RevokedLicensesResponse> localVarResp = revokeAssetWithHttpInfo(xCustomerCode, licenseId, email, productCode);
        return localVarResp.getData();
    }

    /**
     * Revokes a license from a user
     * If licenseId is provided, a single license will be revoked if found. Other parameters are ignored in this case. &lt;br /&gt;If he licenseId is not provided then the licenses will be revoked by the assignee&#39;s email. &lt;br /&gt;In addition to email, productCode might be provided to revoke licenses for specified products only for the defined email. &lt;br /&gt;JetBrains IDE licenses are distributed on a per-user basis and must be statically assigned to developers. Therefore, the revoke operation via the JetBrains Account API is available only 30 days after the license has been assigned. For the automated license distribution you can use the JetBrains License Vault: https://www.jetbrains.com/license-server &lt;br /&gt;If the licenses are being revoked by assignee&#39;s email within 30 days after assignment (for at least 1 assignee&#39;s license found), RECENTLY_ASSIGNED_LICENSE_IS_NOT_AVAILABLE_FOR_REVOKE error will be returned and no licenses will be revoked.
     * @param xCustomerCode Company Profile ID, it can be found on JetBrains Account portal near the company name (optional)
     * @param licenseId ID of a license (optional)
     * @param email Assignee&#39;s email (optional)
     * @param productCode Product code to filter licenses (optional)
     * @return ApiResponse&lt;RevokedLicensesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> licenseIds of revoked licenses </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RevokedLicensesResponse> revokeAssetWithHttpInfo(String xCustomerCode, String licenseId, String email, String productCode) throws ApiException {
        okhttp3.Call localVarCall = revokeAssetValidateBeforeCall(xCustomerCode, licenseId, email, productCode, null);
        Type localVarReturnType = new TypeToken<RevokedLicensesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Revokes a license from a user (asynchronously)
     * If licenseId is provided, a single license will be revoked if found. Other parameters are ignored in this case. &lt;br /&gt;If he licenseId is not provided then the licenses will be revoked by the assignee&#39;s email. &lt;br /&gt;In addition to email, productCode might be provided to revoke licenses for specified products only for the defined email. &lt;br /&gt;JetBrains IDE licenses are distributed on a per-user basis and must be statically assigned to developers. Therefore, the revoke operation via the JetBrains Account API is available only 30 days after the license has been assigned. For the automated license distribution you can use the JetBrains License Vault: https://www.jetbrains.com/license-server &lt;br /&gt;If the licenses are being revoked by assignee&#39;s email within 30 days after assignment (for at least 1 assignee&#39;s license found), RECENTLY_ASSIGNED_LICENSE_IS_NOT_AVAILABLE_FOR_REVOKE error will be returned and no licenses will be revoked.
     * @param xCustomerCode Company Profile ID, it can be found on JetBrains Account portal near the company name (optional)
     * @param licenseId ID of a license (optional)
     * @param email Assignee&#39;s email (optional)
     * @param productCode Product code to filter licenses (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> licenseIds of revoked licenses </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call revokeAssetAsync(String xCustomerCode, String licenseId, String email, String productCode, final ApiCallback<RevokedLicensesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = revokeAssetValidateBeforeCall(xCustomerCode, licenseId, email, productCode, _callback);
        Type localVarReturnType = new TypeToken<RevokedLicensesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
